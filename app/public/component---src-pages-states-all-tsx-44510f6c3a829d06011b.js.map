{"version":3,"sources":["webpack://lgbtq-state-equality-index/./src/features/states/all/AllStatesRadialChart.tsx","webpack://lgbtq-state-equality-index/./src/pages/states/all.tsx"],"names":["AllStatesRadialChart","props","width","height","innerRadius","outerRadius","Math","min","regionOrder","issues","policy_values","edges","map","iss","node","issue","name","states","s","Number","value","sort","Set","id","a","b","d3","indexOf","region","rotation","length","PI","x","domain","d","range","regions","startAngle","lastItem","endAngle","bandwidth","labelAngle","categoryOrder","n","categories","slice","flattened","flatMap","row","category","find","state","abbreviation","status","policy","y","arc","padRadius","color","unknown","labelArc","labelX","angle","radius","cos","labelY","sin","shouldFlip","style","font","padding","viewBox","xmlns","xmlnsXlink","key","stroke","fill","fillOpacity","transform","x1","x2","strokeWidth","textTransform","textAnchor","undefined","xlinkHref","startOffset","dy","i","data","Container","maxWidth","sei"],"mappings":"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","file":"component---src-pages-states-all-tsx-44510f6c3a829d06011b.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport * as d3 from \"d3\";\nimport {\n  State,\n  StateIssue,\n  StateEqualityIndex,\n} from \"../../../definitions/types\";\n\nexport const AllStatesRadialChart = (\n  props: StateEqualityIndex\n): ReactElement => {\n  const width = 1024;\n  const height = width;\n  const innerRadius = 210;\n  const outerRadius = Math.min(width, height) / 2 - 25;\n  const regionOrder = [\"Northeast\", \"South\", \"West\", \"Midwest\"];\n\n  const issues: { [id: string]: string } = {};\n  const policy_values = {};\n\n  for (const issue of props.issues.edges.map(iss => iss.node)) {\n    policy_values[issue.name] = issue.states.map(s => Number(s.value)).sort();\n\n    policy_values[issue.name] = [...new Set(policy_values[issue.name])];\n\n    issues[issue.id] = issue.name;\n  }\n\n  const states = props.states.edges\n    .map((s: { node: State }) => s.node)\n    .sort((a: State, b: State) => {\n      return (\n        d3.ascending(\n          regionOrder.indexOf(a.region),\n          regionOrder.indexOf(b.region)\n        ) || d3.ascending(a.id, b.id)\n      );\n    });\n\n  const rotate = 4.5;\n  const rotation = (rotate / states.length) * Math.PI * 2;\n\n  const x = d3\n    .scaleBand()\n    .domain(states.map(d => d.id))\n    .range([rotation, 2 * Math.PI + rotation]);\n\n  interface ArcRegion {\n    region: string;\n    startAngle: number;\n    endAngle: number;\n    labelAngle: number;\n  }\n\n  const regions: ArcRegion[] = d3\n    .groups(states, (d: State) => d.region)\n    .map(([region, states]) => {\n      const startAngle = x(states[0].id) || 0;\n      const lastItem = states[states.length - 1];\n      const endAngle = (x(lastItem.id) || 0) + x.bandwidth();\n      const labelAngle =\n        ((startAngle + endAngle) / 2 - Math.PI / 2) % (Math.PI * 2);\n      return {\n        region,\n        startAngle,\n        endAngle,\n        labelAngle,\n      };\n    });\n\n  const categoryOrder = [\n    \"TRANSGENDER_HEALTHCARE\",\n    \"SCHOOL_ANTI_BULLYING\",\n    \"PUBLIC_ACCOMMODATIONS\",\n    \"MARRIAGE_EQUALITY\",\n    \"HOUSING\",\n    \"HATE_CRIMES\",\n    \"GENDER_MARKER_UPDATES_ON_IDENTIFICATION\",\n    \"EMPLOYMENT\",\n    \"EDUCATION\",\n    \"DISCRIMINATION_IN_CHILD_WELFARE\",\n    \"ANTI_CONVERSION_THERAPY\",\n  ].map(n => issues[n]);\n\n  const categories = categoryOrder.slice(0);\n\n  interface Flattened {\n    state: string;\n    abbreviation: string;\n    region: string;\n    category: string;\n    status: string;\n    value: string | number;\n  }\n  const flattened: Flattened[] = states.flatMap((row: State) => {\n    return categories.map(category => {\n      const issue = row.issues.find((iss: StateIssue) => iss.name === category);\n      return {\n        state: row.name,\n        abbreviation: row.id,\n        region: row.region,\n        category,\n        status: issue ? issue.policy : \"\",\n        value: issue ? issue.value : \"\",\n      };\n    });\n  });\n\n  const y = d3\n    .scaleRadial()\n    .domain([0, categories.length])\n    .range([innerRadius, outerRadius]);\n\n  const arc = d3\n    .arc<Flattened>()\n    .innerRadius(d => y(categoryOrder.indexOf(d.category)))\n    .outerRadius(d => y(categoryOrder.indexOf(d.category) + 1))\n    .startAngle(d => x(d.abbreviation) as number)\n    .endAngle(d => (x(d.abbreviation) || 0) + x.bandwidth())\n    .padRadius(innerRadius);\n\n  const color = d3\n    .scaleOrdinal<string>()\n    .domain(categories)\n    .range(d3.schemeCategory10)\n    .unknown(\"rgb(234,234,234)\");\n\n  const labelArc = d3\n    .arc<ArcRegion>()\n    .innerRadius(innerRadius - 20)\n    .outerRadius(innerRadius - 20)\n    .startAngle(d => d.startAngle)\n    .endAngle(d => d.endAngle);\n\n  const labelX = (angle: number, radius: number) => Math.cos(angle) * radius;\n  const labelY = (angle: number, radius: number) => Math.sin(angle) * radius;\n\n  const shouldFlip = (angle: number) => angle > 0 && angle < Math.PI;\n\n  return (\n    <div id=\"radial-chart\">\n      <svg\n        style={{\n          width: \"100%\",\n          height: \"auto\",\n          font: \"14px sans-serif\",\n          padding: \"20px\",\n        }}\n        viewBox={`${-width / 2}, ${-height / 2}, ${width}, ${height}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      >\n        <g key=\"datapoints\">\n          {flattened.map(d => {\n            return (\n              <g key={`datapoint-${d.state}-${d.category}`}>\n                <path\n                  d={arc(d) as string}\n                  stroke=\"white\"\n                  fill={color(d.category)}\n                  fillOpacity={\n                    ((policy_values[d.category].indexOf(d.value) + 1) /\n                      policy_values[d.category].length) *\n                    0.9\n                  }\n                />\n                <title>{`${d.state}: ${d.category}, ${d.status}`}</title>\n              </g>\n            );\n          })}\n        </g>\n        <g key=\"dividers\">\n          {regions.map(d => {\n            return (\n              <g\n                key={`divider-${d.region}`}\n                transform={`rotate(${(d.startAngle * 180) / Math.PI - 90})`}\n              >\n                <line\n                  x1={innerRadius}\n                  x2={outerRadius + 30}\n                  stroke=\"black\"\n                  strokeWidth=\"5\"\n                />\n              </g>\n            );\n          })}\n        </g>\n        <g key=\"region-label-paths\">\n          {regions.map(d => {\n            return (\n              <path\n                key={`label-path-${d.region}`}\n                d={labelArc(d) as string}\n                id={`sei-chart-${d.region}`}\n                stroke=\"none\"\n              />\n            );\n          })}\n          <g\n            key=\"region-label-texts\"\n            style={{ textTransform: \"uppercase\" }}\n            fill=\"#888\"\n            textAnchor=\"middle\"\n          >\n            {regions.map(d => {\n              return (\n                <text\n                  key={`label-text-${d.region}`}\n                  transform={\n                    shouldFlip(d.labelAngle)\n                      ? `translate(${labelX(d.labelAngle, 11)}, ${labelY(\n                          d.labelAngle,\n                          11\n                        )})`\n                      : undefined\n                  }\n                >\n                  <textPath\n                    xlinkHref={`#sei-chart-${d.region}`}\n                    startOffset={shouldFlip(d.labelAngle) ? \"75%\" : \"25%\"}\n                  >\n                    {d.region}\n                  </textPath>\n                </text>\n              );\n            })}\n          </g>\n        </g>\n        <g key=\"state-labels\">\n          {states.map(d => {\n            return (\n              <text\n                key={`state-label-${d.id}`}\n                textAnchor=\"middle\"\n                fill=\"#888\"\n                x={labelX(\n                  (x(d.id) || 0) + x.bandwidth() / 2 - Math.PI / 2,\n                  outerRadius + 16\n                )}\n                y={labelY(\n                  (x(d.id) || 0) + x.bandwidth() / 2 - Math.PI / 2,\n                  outerRadius + 16\n                )}\n                dy=\"0.31em\"\n              >\n                {d.id}\n              </text>\n            );\n          })}\n        </g>\n        <g key=\"legend\">\n          {categories.map((d, i) => {\n            return (\n              <g\n                key={`legend-${i}`}\n                transform={`translate(-120,${\n                  (i - (categories.length - 1) / 2) * 20\n                })`}\n              >\n                <rect width=\"18\" height=\"18\" fill={color(d)} />\n                <text\n                  style={{ font: \"11px sans-serif\" }}\n                  x=\"24\"\n                  y=\"9\"\n                  dy=\"0.35em\"\n                >\n                  {d}\n                </text>\n              </g>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n","import React, { ReactElement } from \"react\";\nimport { PageProps, graphql } from \"gatsby\";\nimport { Container } from \"@material-ui/core\";\nimport { AllStatesRadialChart } from \"../../features/states/all/AllStatesRadialChart\";\nimport { Data } from \"../../definitions/types\";\n\nconst AllStatesPage = ({ data }: PageProps<Data>): ReactElement => {\n  return (\n    <main>\n      <Container maxWidth=\"md\">\n        <h1>State policies on LGBTQ+ issues</h1>\n        <AllStatesRadialChart {...data.sei} />\n      </Container>\n    </main>\n  );\n};\n\nexport default AllStatesPage;\n\nexport const query = graphql`\n  query AllStatesPageQuery {\n    sei {\n      states {\n        edges {\n          node {\n            id\n            name\n            region\n            issues {\n              kind\n              name\n              policy\n              value\n            }\n          }\n        }\n      }\n      issues {\n        edges {\n          node {\n            id\n            name\n            states {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}