{"version":3,"sources":["webpack://lgbtq-state-equality-index/./src/common/d3/Axis.tsx","webpack://lgbtq-state-equality-index/./src/features/issues/scatterplot/AllStatesScatterPlotChart.tsx","webpack://lgbtq-state-equality-index/./src/pages/issues/scatterplot.tsx"],"names":["Orientation","translateX","x","translateY","y","AxisDomain","orient","range","tickSize","pathAttrs","offset","window","devicePixelRatio","k","TOP","LEFT","range0","range1","length","pathAttrsDerived","className","stroke","d","RIGHT","BandTick","d3Scale","value","children","tickAttrs","transform","BOTTOM","scaleCopy","copy","bandOffset","Math","max","bandwidth","round","opacity","NumberTick","TickLine","lineAttrs","initialAttrs","lineAttrsDerived","TickText","tickPadding","tickFormat","textAttrs","spacing","fill","dy","Object","assign","val","AllStatesScatterPlotChart","props","height","margin","issues","issue","id","name","states","map","s","sort","a","b","d3","categories","n","domain","padding","flattened","flatMap","row","category","find","iss","state","abbreviation","region","status","policy","xAxisOrientation","yAxisOrientation","viewBox","strokeOpacity","ticks","x1","x2","y1","y2","fontSize","fontFamily","textAnchor","key","cx","cy","r","indexOf","strokeWidth","fillOpacity","data","sei","edges","node","i","Container","maxWidth"],"mappings":"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","file":"component---src-pages-issues-scatterplot-tsx-813a66d4a9764ea33b7c.js","sourcesContent":["import {\n  NumberValue,\n  ScaleBand,\n  ScaleContinuousNumeric,\n  ScaleOrdinal,\n  ScalePoint,\n} from \"d3\";\nimport React, { ReactElement } from \"react\";\n\nexport enum Orientation {\n  TOP = 1,\n  RIGHT,\n  BOTTOM,\n  LEFT,\n}\n\nfunction translateX(x: number) {\n  return \"translate(\" + x + \",0)\";\n}\n\nfunction translateY(y: number) {\n  return \"translate(0,\" + y + \")\";\n}\n\ninterface AxisDomainProps<TRange, TAttrs> {\n  orient: number;\n  range: TRange[];\n  tickSize?: number;\n  pathAttrs?: TAttrs;\n}\n\nexport const AxisDomain = <TRange, TAttrs>({\n  orient,\n  range,\n  tickSize,\n  ...pathAttrs\n}: AxisDomainProps<TRange, TAttrs>): ReactElement => {\n  tickSize = tickSize === null || tickSize === undefined ? 6 : tickSize;\n  const offset =\n    typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5;\n  const k = orient === Orientation.TOP || orient === Orientation.LEFT ? -1 : 1;\n\n  const range0 = +range[0] + offset,\n    range1 = +range[range.length - 1] + offset;\n\n  const pathAttrsDerived = {\n    className: \"domain\",\n    stroke: \"currentColor\",\n    d: \"\",\n    ...pathAttrs,\n  };\n\n  if (orient === Orientation.LEFT || orient === Orientation.RIGHT) {\n    pathAttrsDerived.d =\n      tickSize > 0\n        ? \"M\" +\n          k * tickSize +\n          \",\" +\n          range0 +\n          \"H\" +\n          offset +\n          \"V\" +\n          range1 +\n          \"H\" +\n          k * tickSize\n        : \"M\" + offset + \",\" + range0 + \"V\" + range1;\n  } else {\n    pathAttrsDerived.d =\n      tickSize > 0\n        ? \"M\" +\n          range0 +\n          \",\" +\n          k * tickSize +\n          \"V\" +\n          offset +\n          \"H\" +\n          range1 +\n          \"V\" +\n          k * tickSize\n        : \"M\" + range0 + \",\" + offset + \"H\" + range1;\n  }\n\n  return <path {...pathAttrsDerived} />;\n};\n\ninterface BandTickProps<TDomain, TickAttrs> {\n  orient: Orientation;\n  d3Scale: ScaleBand<TDomain> | ScalePoint<TDomain>;\n  value: TDomain;\n  tickAttrs?: TickAttrs;\n}\n\nexport const BandTick = <TDomain, TickAttrs>({\n  orient,\n  d3Scale,\n  value,\n  children,\n  ...tickAttrs\n}: BandTickProps<TDomain, TickAttrs> &\n  React.SVGProps<SVGGElement>): ReactElement => {\n  const offset =\n    typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5;\n  const transform =\n    orient === Orientation.TOP || orient === Orientation.BOTTOM\n      ? translateX\n      : translateY;\n\n  const scaleCopy = d3Scale.copy();\n  let bandOffset = Math.max(0, scaleCopy.bandwidth() - offset * 2) / 2;\n  if (scaleCopy.round()) bandOffset = Math.round(bandOffset);\n  const position = (d: TDomain) => +(scaleCopy(d) || 0) + bandOffset;\n\n  return (\n    <g\n      className=\"tick\"\n      opacity=\"1\"\n      transform={transform(position(value) + offset)}\n      {...tickAttrs}\n    >\n      {children}\n      {/*{line}\n      {text}*/}\n    </g>\n  );\n};\n\ninterface OrdinalTickProps<TDomain, TRange, TUnknown, TickAttrs> {\n  orient: Orientation;\n  d3Scale: ScaleOrdinal<TDomain, TRange, TUnknown>;\n  value: TDomain;\n  tickAttrs?: TickAttrs;\n}\n\nexport const OrdinalTick = <TDomain, TRange, TUnknown, TickAttrs>({\n  orient,\n  d3Scale,\n  value,\n  children,\n  ...tickAttrs\n}: OrdinalTickProps<TDomain, TRange, TUnknown, TickAttrs> &\n  React.SVGProps<SVGGElement>): ReactElement => {\n  const offset =\n    typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5;\n  const transform =\n    orient === Orientation.TOP || orient === Orientation.BOTTOM\n      ? translateX\n      : translateY;\n  const position = (d: TDomain) => +d3Scale(d);\n\n  return (\n    <g\n      className=\"tick\"\n      opacity=\"1\"\n      transform={transform(position(value) + offset)}\n      {...tickAttrs}\n    >\n      {children}\n    </g>\n  );\n};\n\ninterface NumberTickProps<TRange, TOutput, TUnknown, TickAttrs> {\n  orient: Orientation;\n  d3Scale: ScaleContinuousNumeric<TRange, TOutput, TUnknown>;\n  value: NumberValue;\n  tickAttrs?: TickAttrs;\n}\n\nexport const NumberTick = <TRange, TOutput, TUnknown, TickAttrs>({\n  orient,\n  d3Scale,\n  value,\n  children,\n  ...tickAttrs\n}: NumberTickProps<TRange, TOutput, TUnknown, TickAttrs> &\n  React.SVGProps<SVGGElement>): ReactElement => {\n  const offset =\n    typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5;\n  const transform =\n    orient === Orientation.TOP || orient === Orientation.BOTTOM\n      ? translateX\n      : translateY;\n  const position = (d: NumberValue) => +d3Scale(d);\n\n  return (\n    <g\n      className=\"tick\"\n      opacity=\"1\"\n      transform={transform(position(value) + offset)}\n      {...tickAttrs}\n    >\n      {children}\n    </g>\n  );\n};\n\ninterface TickLineProps<TLineAttrs> extends React.SVGProps<SVGLineElement> {\n  orient: Orientation;\n  tickSize?: number;\n  lineAttrs?: TLineAttrs;\n}\nexport const TickLine = <TLineAttrs,>({\n  orient,\n  tickSize = 6,\n  ...lineAttrs\n}: TickLineProps<TLineAttrs>): ReactElement => {\n  const k = orient === Orientation.TOP || orient === Orientation.LEFT ? -1 : 1;\n  const x =\n    orient === Orientation.LEFT || orient === Orientation.RIGHT ? \"x\" : \"y\";\n\n  const initialAttrs = {\n    stroke: \"currentColor\",\n  };\n  initialAttrs[`${x}2`] = k * tickSize;\n\n  const lineAttrsDerived = { ...initialAttrs, ...lineAttrs };\n\n  return <line {...lineAttrsDerived} />;\n};\n\ninterface TickTextProps<TDomain, TTextAttrs>\n  extends React.SVGProps<SVGTextElement> {\n  orient: Orientation;\n  tickSize?: number;\n  tickPadding?: number;\n  tickFormat?(count?: TDomain): string;\n  value: TDomain;\n  textAttrs?: TTextAttrs;\n}\n\n// For tickFormat, library consumers should use scale.tickFormat(...ticks)\n// if no custom format exists.\nexport const TickText = <TDomain, TTextAttrs>({\n  orient,\n  tickSize = 6,\n  tickPadding = 3,\n  tickFormat,\n  value,\n  ...textAttrs\n}: TickTextProps<TDomain, TTextAttrs>): ReactElement => {\n  const k = orient === Orientation.TOP || orient === Orientation.LEFT ? -1 : 1;\n  const x =\n    orient === Orientation.LEFT || orient === Orientation.RIGHT ? \"x\" : \"y\";\n\n  const spacing = Math.max(+tickSize, 0) + +tickPadding;\n\n  const initialAttrs = {\n    fill: \"currentColor\",\n    dy:\n      orient === Orientation.TOP\n        ? \"0em\"\n        : orient === Orientation.BOTTOM\n        ? \"0.71em\"\n        : \"0.32em\",\n  };\n  initialAttrs[x] = k * spacing;\n\n  textAttrs = Object.assign(initialAttrs, textAttrs);\n\n  const val = tickFormat ? tickFormat(value) : value;\n  return <text {...textAttrs}>{val}</text>;\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport {\n  Orientation,\n  BandTick,\n  TickLine,\n  TickText,\n  NumberTick,\n} from \"../../../common/d3/Axis\";\n\nexport const AllStatesScatterPlotChart = (props): React.ReactElement => {\n  const width = 620;\n  const height = 400;\n  const margin = { top: 30, right: 270, bottom: 20, left: 260 };\n  //const margin = { top: 0, right: 0, bottom: 0, left: 0 };\n\n  const issues: { [id: string]: string } = {};\n\n  //const issues = prop.issues.map((issue) => {\n\n  //})\n  for (const issue of props.issues) {\n    /*if (issues[issue.node.id]) {\n      if issues[issue.node.id]\n    }*/\n    issues[issue.id] = issue.name;\n  }\n\n  const states = props.states\n    .map(s => s)\n    .sort((a, b) => d3.ascending(a.id, b.id));\n\n  const categories = [\n    \"TRANSGENDER_HEALTHCARE\",\n    \"SCHOOL_ANTI_BULLYING\",\n    \"PUBLIC_ACCOMMODATIONS\",\n    \"MARRIAGE_EQUALITY\",\n    \"HOUSING\",\n    \"HATE_CRIMES\",\n    \"GENDER_MARKER_UPDATES_ON_IDENTIFICATION\",\n    \"EMPLOYMENT\",\n    \"EDUCATION\",\n    \"DISCRIMINATION_IN_CHILD_WELFARE\",\n    \"ANTI_CONVERSION_THERAPY\",\n  ].map(n => issues[n]);\n\n  const y = d3\n    .scalePoint()\n    .domain(categories)\n    .range([0, height - margin.bottom])\n    .padding(1);\n\n  const x = d3\n    .scaleLinear()\n    .domain([-6, 6])\n    .range([0, width - margin.right]);\n\n  const flattened = states.flatMap(row => {\n    return categories.map(category => {\n      const issue = row.issues.find(iss => iss.name === category);\n      return {\n        state: row.name,\n        abbreviation: row.id,\n        region: row.region,\n        category,\n        status: issue.policy,\n        value: issue.value,\n      };\n    });\n  });\n  // issue[value] = [{state, abbreviatoin, region, category, stat}]\n\n  const xAxisOrientation = Orientation.BOTTOM;\n  const yAxisOrientation = Orientation.LEFT;\n\n  return (\n    <div id=\"all-states-scatter-plot\">\n      <svg viewBox={`0, 0, ${width}, ${height}`}>\n        <g stroke=\"currentColor\" strokeOpacity=\"0.1\">\n          {x.ticks().map(d => {\n            return (\n              <line\n                x1={x(d) + margin.left + 0.5}\n                x2={x(d) + margin.left + 0.5}\n                y1={margin.top}\n                y2={height - margin.bottom}\n              />\n            );\n          })}\n          {categories.map(d => {\n            return (\n              <line\n                y1={(y(d) || 0) + margin.top}\n                y2={(y(d) || 0) + margin.top}\n                x1={margin.left}\n                x2={width}\n              />\n            );\n          })}\n        </g>\n        <g\n          transform={`translate(${margin.left}, ${margin.top})`}\n          /*transform={`translate(0,${height - margin.top - margin.bottom})`}*/\n          fill=\"none\"\n          fontSize=\"12\"\n          fontFamily=\"sans-serif\"\n          textAnchor=\"end\"\n        >\n          {y.domain().map(issue => {\n            return (\n              <BandTick orient={yAxisOrientation} d3Scale={y} value={issue}>\n                <TickLine\n                  orient={\n                    yAxisOrientation\n                  } /*tickSize={-height + margin.top} style={{ stroke: '#bbb', strokeWidth: 0.5, strokeDashArray: '4, 2' }}*/\n                />\n                <TickText\n                  orient={yAxisOrientation}\n                  value={issue}\n                  fontSize=\"10\"\n                />\n              </BandTick>\n            );\n          })}\n        </g>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {flattened.map(d => {\n            // Should use larger bubbles to indicate impact instead of\n            // overlapping circles.  Can do it by state count and by population.\n            return (\n              <g key={`datapoint-${d.state}-${d.category}`}>\n                <circle\n                  cx={x(d.value) + 0.5}\n                  cy={y(d.category)}\n                  r=\"3\"\n                  fill={d3.schemeTableau10[categories.indexOf(d.category)]}\n                  strokeWidth=\"0\"\n                  fillOpacity=\"0.7\"\n                />\n                <title>{`${d.state}: ${d.category}, ${d.status}`}</title>\n              </g>\n            );\n          })}\n        </g>\n        <g\n          transform={`translate(${margin.left},${height - margin.bottom})`}\n          fill=\"none\"\n          fontSize=\"12\"\n          fontFamily=\"sans-serif\"\n          textAnchor=\"start\"\n        >\n          {x.ticks().map(value => {\n            return (\n              <NumberTick orient={xAxisOrientation} d3Scale={x} value={value}>\n                <TickLine orient={xAxisOrientation} strokeWidth=\"0.7\" />\n                <TickText\n                  orient={xAxisOrientation}\n                  value={value}\n                  fontSize=\"8\"\n                  tickPadding={0}\n                />\n              </NumberTick>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n","import React, { ReactElement } from \"react\";\nimport { PageProps, graphql } from \"gatsby\";\nimport { AllStatesScatterPlotChart } from \"../../features/issues/scatterplot/AllStatesScatterPlotChart\";\nimport { Container } from \"@material-ui/core\";\nimport { Data } from \"../../definitions/types\";\n\nconst AllStatesScatterPlotPage = ({ data }: PageProps<Data>): ReactElement => {\n  const states = data.sei.states.edges.map(s => s.node);\n  const issues = data.sei.issues.edges.map(i => i.node);\n\n  return (\n    <main>\n      <Container maxWidth=\"lg\">\n        <h1>State Equality Index 2020 - All States</h1>\n        <AllStatesScatterPlotChart states={states} issues={issues} />\n      </Container>\n    </main>\n  );\n};\n\nexport default AllStatesScatterPlotPage;\n\nexport const query = graphql`\n  query AllStatesScatterPlotPageQuery {\n    sei {\n      states {\n        edges {\n          node {\n            id\n            name\n            region\n            issues {\n              kind\n              name\n              policy\n              value\n            }\n          }\n        }\n      }\n      issues {\n        edges {\n          node {\n            id\n            name\n            states {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}