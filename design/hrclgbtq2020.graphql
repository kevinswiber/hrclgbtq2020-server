schema {
  query: QueryRoot
}

type Issue {
  id: IssueKind!
  name: String!
  states: [IssueState!]!
}

type IssueConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IssueEdge]
}

# An edge in a connection.
type IssueEdge {
  # The item at the end of the edge
  node: Issue!

  # A cursor for use in pagination
  cursor: String!
}

# A category of reported issue.
enum IssueKind {
  TRANSGENDER_HEALTHCARE
  SCHOOL_ANTI_BULLYING
  PUBLIC_ACCOMMODATIONS
  MARRIAGE_EQUALITY
  HOUSING
  HATE_CRIMES
  GENDER_MARKER_UPDATES_ON_IDENTIFICATION
  EMPLOYMENT
  EDUCATION
  DISCRIMINATION_IN_CHILD_WELFARE
  ANTI_CONVERSION_THERAPY
}

type IssueState {
  id: String!
  name: String!
  policy: String!
  value: Int!
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type QueryRoot {
  state(id: String!): State
  issue(id: IssueKind!): Issue
  states(after: String, before: String, first: Int, last: Int): StateConnection!
  issues(after: String, before: String, first: Int, last: Int): IssueConnection!
}

type Score {
  kind: ScoreKind!
  description: String!
}

enum ScoreKind {
  INNOVATIVE
  SOLIDIFYING
  BUILDING
  HIGH_PRIORITY
}

type State {
  id: String!
  name: String!
  region: String!
  district: String!
  score: Score!
  issues: [StateIssue!]!
}

type StateConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [StateEdge]
}

# An edge in a connection.
type StateEdge {
  # The item at the end of the edge
  node: State!

  # A cursor for use in pagination
  cursor: String!
}

type StateIssue {
  name: String!
  kind: IssueKind!
  policy: String!
  value: Int!
}
